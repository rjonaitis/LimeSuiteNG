/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sdrdevice_source.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(94d4a4623f512b539251e1bc3baf61ef)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/limesuiteng/sdrdevice_source.h>
// pydoc.h is automatically generated in the build directory
#include <sdrdevice_source_pydoc.h>

void bind_sdrdevice_source(py::module& m)
{

    using sdrdevice_source = ::gr::limesuiteng::sdrdevice_source;


    py::class_<sdrdevice_source,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<sdrdevice_source>>(
        m, "sdrdevice_source", D(sdrdevice_source))

        .def(py::init(&sdrdevice_source::make),
             py::arg("alias"),
             py::arg("deviceHandleHint"),
             py::arg("chipIndex"),
             py::arg("channelIndexes"),
             py::arg("dataFormat"),
             py::arg("sampleRate"),
             py::arg("rf_oversampling"),
             D(sdrdevice_source, make))


        .def("set_config_file",
             &sdrdevice_source::set_config_file,
             py::arg("file_path"),
             D(sdrdevice_source, set_config_file))


        .def("set_lo_frequency",
             &sdrdevice_source::set_lo_frequency,
             py::arg("frequencyHz"),
             D(sdrdevice_source, set_lo_frequency))


        .def("set_lpf_bandwidth",
             &sdrdevice_source::set_lpf_bandwidth,
             py::arg("bandwidthHz"),
             D(sdrdevice_source, set_lpf_bandwidth))


        .def("set_antenna",
             &sdrdevice_source::set_antenna,
             py::arg("antenna_name"),
             D(sdrdevice_source, set_antenna))


        .def("set_gain_generic",
             &sdrdevice_source::set_gain_generic,
             py::arg("gain_dB"),
             D(sdrdevice_source, set_gain_generic))

        ;
}
